@inproceedings{nadji2009document,
  title={Document Structure Integrity: A Robust Basis for Cross-site Scripting Defense.},
  author={Nadji, Yacin and Saxena, Prateek and Song, Dawn},
  booktitle={NDSS},
  volume={20},
  year={2009}
}

@article{pazos2020precise,
      title={Precise {XSS} detection and mitigation with Client-side Templates}, 
      author={Jose Carlos Pazos and Jean-Sebastien Legare and Ivan Beschastnikh and William Aiello},
      year={2020},
      url={https://arxiv.org/abs/2005.07826},
      eprint={2005.07826},
      archivePrefix={arXiv},
      primaryClass={cs.CR}
}

@online{CSP,
	title = {Same-origin policy},
	year={2019},
	howpublished={\url{https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy}},
	lastaccessed = {September 14, 2019}
}

@online{SOP,
	title = {Content Security Policy (CSP)},
	year={2019},
	howpublished={\url{https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP}},
	lastaccessed = {September 14, 2019}
}


@online{Acunetix,
	author={Ian Muscat},
	year = {2017},
	title={Acunetix Vulnerability Testing Report 2017},
	howpublished = {\url{https://www.acunetix.com/blog/articles/acunetix-vulnerability-testing-report-2017/}},
	month = {jun},
	lastaccessed = {October 26, 2018}
	}

@online{adblock,
	title={Adblock Plus homepage},
	howpublished ={\url{https://adblockplus.org/}},
	lastaccessed = {June 16, 2020}
}

@online{adblockhow,
	title={How does AdBlock work?},
	year={2018},
	month={aug},
	howpublished={\url{https://help.getadblock.com/support/solutions/articles/6000087914-how-does-adblock-work-}},
	lastaccessed={June 16, 2020}
}
	
@online{Noscript,
	title={NoScript homepage},
	howpublished = {\url{https://noscript.net/}},
	lastaccessed = {October 26, 2018}
}

@online{top500,
	title={Moz Top 500 Websites},
	howpublished= {\url{https://moz.com/top500}},
	lastaccessed = {August 17, 2019}
}

@online{vulnbytype,
	title = {Vulnerabilities By Type},
	howpublished={\url{https://www.cvedetails.com/vulnerabilities-by-types.php}},
	lastaccessed = {September 04, 2019}
}

@online{w3stats,
	title={Usage of content management systems for websites},
	year={2019},
	howpublished = {\url{https://w3techs.com/technologies/overview/content_management/all}},
	lastaccessed = {October 13, 2019}
}

@online{w3techs,
	title={WordPress powers 25\% of all websites},
	year= {2019},
	howpublished = {\url{https://w3techs.com/blog/entry/wordpress-powers-25-percent-of-all-websites}},
	lastaccessed = {April 28, 2019}
}

@online{resourceType,
	title={webRequest ResourceType},
	year= {2019},
	howpublished = {\url{https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/ResourceType}},
	lastaccessed = {June 17, 2019}
}

@online{webRequest,
	title={webRequest},
	year= {2019},
	howpublished ={\url{https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/webRequest}},
	lastaccessed = {June 17, 2019}
}

@online{safecontent,
	title={Safely inserting external content into a page},
	year={2019},
	howpublished = {\url{https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Safely_inserting_external_content_into_a_page}},
	lastaccessed = {June 17, 2019}
}

@online{wpwhitesecurity,
	title={Statistics Show Why WordPress is a Popular Hacker Target},
	year={2019},
	howpublished = {https://www.wpwhitesecurity.com/statistics-70-percent-wordpress-installations-vulnerable/},
	lastaccessed = {April 28, 2019}
}

@online{deprecatexssauditor,
	title={Intent to Deprecate and Remove: {XSS}{A}uditor},
	year={2019},
	howpublished={\deprecatexssauditorURL},
	lastaccessed={July 24, 2019}
}

@online{cvedetailshome,
	title={CVE Details homepage},
	year={2019},
	howpublished={\url{https://www.cvedetails.com/}},
	lastaccessed = {May 31, 2019}
}

@online{cvedetails,
	title={Wordpress: Vulnerability Statistics},
	year={2019},
	howpublished = {\url{https://www.cvedetails.com/product/4096/Wordpress-Wordpress.html?vendor_id=2337}},
	lastaccessed = {April 28, 2019}
}

@online{xsscves,
	title={CVE Details vulnerabilities by type},
	year={2020},
	howpublished = {\url{https://www.cvedetails.com/vulnerabilities-by-types.php}},
	lastaccessed = {June 14, 2020}
}

@online{cvemitre,
	title={WordPress CVEs},
	year={2019},
	howpublished = {\url{https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=wordpress}},
	lastaccessed = {October 14, 2019}
}

@online{wpplugins,
	title={Wordpress: Plugins},
	year={2019},
	howpublished = {\url{https://wordpress.org/plugins/}},
	lastaccessed = {June 25, 2019}
}

@online {reducetimeprecision,
	title={Reducing the precision of the DOMHighResTimeStamp resolution},
	year={2018},
	howpublished={\url{https://github.com/w3c/hr-time/issues/56}},
	lastaccessed={September 04, 2019}
}

@online {resolutionconsiderations,
	title={Security and privacy considerations for DOMHighResTimeStamp resolution},
	year={2019},
	howpublished={\url{https://github.com/w3c/hr-time/issues/79}},
	lastaccessed={September 04, 2019}
} 

@online{exploitdb,
	title={Exploit Database},
	year={2019},
	howpublished = {\url{https://www.exploit-db.com/}},
	lastaccessed = {July 8, 2019}
}

@online{studyCVE,
	title={WordPress Plugin Responsive Cookie Consent 1.7 / 1.6 / 1.5 - (Authenticated) Persistent Cross-Site Scripting},
	year={2019},
	howpublished = {\url{https://www.exploit-db.com/exploits/44563}},
	lastaccessed = {July 8, 2019}
}

@online{nMap,
	title={nMap Network Mapper},
	year={2019},
	howpublished = {\url{https://nmap.org/}},
	lastaccessed = {June 17, 2019}
}

@online{wpscan,
	title={WPScan},
year={2019},
howpublished = {\url{https://wpscan.org/}},
lastaccessed = {April 28, 2019}
}

@online{rccpatch,
	title={Responsive Cookie Consent 1.8 patches},
	year={2019},
	howpublished = {\url{https://plugins.trac.wordpress.org/browser/responsive-cookie-consent/tags/1.8/includes/admin-page.php}},
	lastaccessed = {August 1, 2019}
}

@online{wpsanitize,
	title={WordPress sanitize text field},
	year={2019},
	howpublished={\url{https://developer.wordpress.org/reference/functions/sanitize_text_field}},
	lastaccessed={August 1, 2019}
}

@online{WPStats,
	title={WordPress Statistics},
	year={2018},
	howpublished = {\url{https://wordpress.org/about/stats/}},
	lastaccessed = {October 26, 2018}
}

@online{Sucuri,
	title={Hacked Website Report 2016/Q3},
	year={2016},
	howpublished = {\url{https://sucuri.net/reports/Sucuri-Hacked-Website-Report-2016Q3.pdf}},
	lastaccessed = {April 28, 2019}
}

@online{Rapid7,
	title={Security Report for In-Production Web Applications},
	year={2018},
	howpublished={https://www.rapid7.com/resources/security-report-for-in-production-web-applications/},
	lastaccessed = {September 14, 2019}
}

@InProceedings{10.1007/978-3-319-66399-9_7,
	author="Heiderich, Mario
	and Sp{\"a}th, Christopher
	and Schwenk, J{\"o}rg",
	editor="Foley, Simon N.
	and Gollmann, Dieter
	and Snekkenes, Einar",
	title="DOMPurify: Client-Side Protection Against {XSS} and Markup Injection",
	booktitle="Computer Security -- ESORICS 2017",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="116--134",
	abstract="To prevent Cross-Site Scripting (XSS) and related attacks, sanitation of untrusted content is usually performed either on the server side, or by client-side filters like XSS Auditor or NoScript. However, modern web applications (including mobile apps) may not be able to rely on these mechanisms any more since untrusted content may pass these filters as ciphertext or may completely be processed within the DOM of the browser/app.",
	isbn="978-3-319-66399-9"
}
@inproceedings{Jim:2007:DSI:1242572.1242654,
	author = {Jim, Trevor and Swamy, Nikhil and Hicks, Michael},
	title = {Defeating Script Injection Attacks with Browser-enforced Embedded Policies},
	booktitle = {Proceedings of the 16th International Conference on World Wide Web},
	series = {WWW '07},
	year = {2007},
	isbn = {978-1-59593-654-7},
	location = {Banff, Alberta, Canada},
	pages = {601--610},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1242572.1242654},
	doi = {10.1145/1242572.1242654},
	acmid = {1242654},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {cross-site scripting, script injection, web application security},
} 

@inproceedings{Snyder:2017:MWD:3133956.3133966,
	author = {Snyder, Peter and Taylor, Cynthia and Kanich, Chris},
	title = {Most Websites Don'T Need to Vibrate: A Cost-Benefit Approach to Improving Browser Security},
	booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
	series = {CCS '17},
	year = {2017},
	isbn = {978-1-4503-4946-8},
	location = {Dallas, Texas, USA},
	pages = {179--194},
	numpages = {16},
	url = {http://doi.acm.org/10.1145/3133956.3133966},
	doi = {10.1145/3133956.3133966},
	acmid = {3133966},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {browser security, software security, web security and privacy},
} 

@inproceedings{Stock:2017:WTI:3241189.3241265,
	author = {Stock, Ben and Johns, Martin and Steffens, Marius and Backes, Michael},
	title = {How the Web Tangled Itself: Uncovering the History of Client-side Web (in)Security},
	booktitle = {Proceedings of the 26th USENIX Conference on Security Symposium},
	series = {SEC'17},
	year = {2017},
	isbn = {978-1-931971-40-9},
	location = {Vancouver, BC, Canada},
	pages = {971--987},
	numpages = {17},
	url = {http://dl.acm.org/citation.cfm?id=3241189.3241265},
	acmid = {3241265},
	publisher = {USENIX Association},
	address = {Berkeley, CA, USA},
} 

@inproceedings{Xu:2006:TPE:1267336.1267345,
 author = {Xu, Wei and Bhatkar, Sandeep and Sekar, R.},
 title = {Taint-enhanced Policy Enforcement: A Practical Approach to Defeat a Wide Range of Attacks},
 booktitle = {Proceedings of the 15th Conference on USENIX Security Symposium - Volume 15},
 series = {USENIX-SS'06},
 year = {2006},
 location = {Vancouver, B.C., Canada},
 articleno = {9},
 url = {http://dl.acm.org/citation.cfm?id=1267336.1267345},
 acmid = {1267345},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
} 

@inproceedings{Pietraszek:2005:DAI:2146257.2146267,
 author = {Pietraszek, Tadeusz and Berghe, Chris Vanden},
 title = {Defending Against Injection Attacks Through Context-sensitive String Evaluation},
 booktitle = {Proceedings of the 8th International Conference on Recent Advances in Intrusion Detection},
 series = {RAID'05},
 year = {2006},
 isbn = {3-540-31778-3, 978-3-540-31778-4},
 location = {Seattle, WA},
 pages = {124--145},
 numpages = {22},
 url = {http://dx.doi.org/10.1007/11663812_7},
 doi = {10.1007/11663812_7},
 acmid = {2146267},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
 keywords = {PHP, injection attacks, internal sensors, intrusion prevention, web applications},
} 

@inproceedings{DBLP:conf/sec/Nguyen-TuongGGSE05,
  author    = {Anh Nguyen{-}Tuong and
               Salvatore Guarnieri and
               Doug Greene and
               Jeff Shirley and
               David Evans},
  title     = {Automatically Hardening Web Applications Using Precise Tainting},
  booktitle = {Security and Privacy in the Age of Ubiquitous Computing, {IFIP} {TC11}
               20th International Conference on Information Security {(SEC} 2005),
               May 30 - June 1, 2005, Chiba, Japan},
  pages     = {295--308},
  year      = {2005},
  crossref  = {DBLP:conf/sec/2005},
  timestamp = {Tue, 13 Mar 2018 15:08:56 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/sec/Nguyen-TuongGGSE05},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Bisht:2008:XPD:1428322.1428325,
 author = {Bisht, Prithvi and Venkatakrishnan, V. N.},
 title = {{XSS}-{GUARD}: Precise Dynamic Prevention of Cross-Site Scripting Attacks},
 booktitle = {Proceedings of the 5th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment},
 series = {DIMVA '08},
 year = {2008},
 isbn = {978-3-540-70541-3},
 location = {Paris, France},
 pages = {23--43},
 numpages = {21},
 url = {http://dx.doi.org/10.1007/978-3-540-70542-0_2},
 doi = {10.1007/978-3-540-70542-0_2},
 acmid = {1428325},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
 keywords = {Attack Prevention, Cross-site scripting (XSS), Filtering, Security},
} 


@article{DBLP:journals/corr/abs-1801-01203,
  author    = {Paul Kocher and
               Daniel Genkin and
               Daniel Gruss and
               Werner Haas and
               Mike Hamburg and
               Moritz Lipp and
               Stefan Mangard and
               Thomas Prescher and
               Michael Schwarz and
               Yuval Yarom},
  title     = {Spectre Attacks: Exploiting Speculative Execution},
  journal   = {CoRR},
  volume    = {abs/1801.01203},
  year      = {2018},
  url       = {http://arxiv.org/abs/1801.01203},
  archivePrefix = {arXiv},
  eprint    = {1801.01203},
  timestamp = {Mon, 13 Aug 2018 16:48:36 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1801-01203},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{Kirda:2009:CCS:2639535.2639808,
 author = {Kirda, Engin and Jovanovic, Nenad and Kruegel, Christopher and Vigna, Giovanni},
 title = {Client-side Cross-site Scripting Protection},
 journal = {Comput. Secur.},
 issue_date = {October, 2009},
 volume = {28},
 number = {7},
 month = oct,
 year = {2009},
 issn = {0167-4048},
 pages = {592--604},
 numpages = {13},
 url = {http://dx.doi.org/10.1016/j.cose.2009.04.008},
 doi = {10.1016/j.cose.2009.04.008},
 acmid = {2639808},
 publisher = {Elsevier Advanced Technology Publications},
 address = {Oxford, UK, UK},
 keywords = {Client-side defense, Client-side protection, Cross-site scripting (XSS), Firewall, Intrusion detection, Proxy, Web security},
} 

@online{xssauditor,
title = {{XSS} Auditor},
year={2019},
howpublished={\url{https://www.chromium.org/developers/design-documents/xss-auditor}},
lastaccessed={September 11, 2019}
}

@online{examplecve,
title={WordPress Plugin Responsive Cookie Consent 1.7 / 1.6 / 1.5 - (Authenticated) Persistent Cross-Site Scripting},
year={2018},
howpublished={\url{https://www.exploit-db.com/exploits/44563}},
lastaccessed={September 11, 2019}
}

@online{navigationtiming,
title={Navigation Timing Level 2},
year={2019},
howpublished={\url{https://www.w3.org/TR/navigation-timing-2/}},
lastaccessed={October 03, 2019}
}

@inproceedings{Hallaraker:2005:DMJ:1078029.1078861,
 author = {Hallaraker, Oystein and Vigna, Giovanni},
 title = {Detecting Malicious JavaScript Code in Mozilla},
 booktitle = {Proceedings of the 10th IEEE International Conference on Engineering of Complex Computer Systems},
 series = {ICECCS '05},
 year = {2005},
 isbn = {0-7695-2284-X},
 pages = {85--94},
 numpages = {10},
 url = {http://dx.doi.org/10.1109/ICECCS.2005.35},
 doi = {10.1109/ICECCS.2005.35},
 acmid = {1078861},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {Mobile Code, JavaScript, Web Applications},
} 

@inproceedings{DBLP:conf/ndss/SteffensRJS19,
  author    = {Marius Steffens and
               Christian Rossow and
               Martin Johns and
               Ben Stock},
  title     = {Don't Trust The Locals: Investigating the Prevalence of Persistent
               Client-Side Cross-Site Scripting in the Wild},
  booktitle = {26th Annual Network and Distributed System Security Symposium, {NDSS}
               2019, San Diego, California, USA, February 24-27, 2019},
  year      = {2019},
  crossref  = {DBLP:conf/ndss/2019},
  url       = \url{https://www.ndss-symposium.org/ndss-paper/dont-trust-the-locals-investigating-the-prevalence-of-persistent-client-side-cross-site-scripting-in-the-wild/},
  timestamp = {Thu, 02 May 2019 15:52:50 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/ndss/SteffensRJS19},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{Wurzinger:2009:SMX:1656360.1656379,
 author = {Wurzinger, P. and Platzer, C. and Ludl, C. and Kirda, E. and Kruegel, C.},
 title = {SWAP: Mitigating {XSS} Attacks Using a Reverse Proxy},
 booktitle = {Proceedings of the 2009 ICSE Workshop on Software Engineering for Secure Systems},
 series = {IWSESS '09},
 year = {2009},
 isbn = {978-1-4244-3725-2},
 pages = {33--39},
 numpages = {7},
 url = {http://dx.doi.org/10.1109/IWSESS.2009.5068456},
 doi = {10.1109/IWSESS.2009.5068456},
 acmid = {1656379},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {security threat, mitigating XSS attacks, reverse proxy, Web sites, cross-site scripting techniques, craft credible phishing sites, error-prone parameterization, secure Web application proxy, HTML responses, modified Web browser},
} 

@inproceedings{precise_dom_xss,
 author = {Stock, Ben and Lekies, Sebastian and Mueller, Tobias and Spiegel, Patrick and Johns, Martin},
 title = {Precise Client-side Protection Against DOM-based Cross-site Scripting},
 booktitle = {Proceedings of the 23rd USENIX Conference on Security Symposium},
 series = {SEC'14},
 year = {2014},
 isbn = {978-1-931971-15-7},
 location = {San Diego, CA},
 pages = {655--670},
 numpages = {16},
 url = {http://dl.acm.org/citation.cfm?id=2671225.2671267},
 acmid = {2671267},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
} 

@inproceedings{Sundareswaran:2012:XHS:2352970.2352994,
author = {Sundareswaran, Smitha and Squicciarini, Anna Cinzia},
title = {{XSS}-{D}ec: A Hybrid Solution to Mitigate Cross-site Scripting Attacks},
booktitle = {Proceedings of the 26th Annual IFIP WG 11.3 Conference on Data and Applications Security and Privacy},
series = {DBSec'12},
year = {2012},
isbn = {978-3-642-31539-8},
location = {Paris, France},
pages = {223--238},
numpages = {16},
url = {http://dx.doi.org/10.1007/978-3-642-31540-4_17},
doi = {10.1007/978-3-642-31540-4_17},
acmid = {2352994},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
} 

@INPROCEEDINGS{6825636, 
 author={E. {Abgrall} and Y. L. {Traon} and S. {Gombault} and M. {Monperrus}}, 
 booktitle={2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops}, 
  title={Empirical Investigation of the Web Browser Attack Surface under Cross-Site Scripting: An Urgent Need for Systematic Security Regression Testing}, 
  year={2014}, 
 volume={}, 
 number={},
  pages={34-41},  
doi={10.1109/ICSTW.2014.63}}


@inproceedings{10.1145/1595696.1595711,
author = {Bezemer, Cor-Paul and Mesbah, Ali and van Deursen, Arie},
title = {Automated Security Testing of Web Widget Interactions},
year = {2009},
isbn = {9781605580012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1595696.1595711},
doi = {10.1145/1595696.1595711},
abstract = {We present a technique for automatically detecting security vulnerabilities in client-side self-contained components, called web widgets, that can co-exist independently on a single web page. In this paper we focus on two security scenarios, namely the case in which (1) a malicious widget changes the content (DOM) of another widget, and (2) a widget steals data from another widget and sends it to the server via an HTTP request. We propose a dynamic analysis approach for automatically executing the web application and analyzing the runtime changes in the user interface, as well as the outgoing HTTP calls, to detect inter-widget interaction violations.Our approach, implemented in a number of open source ATUSA plugins, called DIVA, requires no modification of application code, and has few false positives. We discuss the results of an empirical evaluation of the violation revealing capabilities, performance, and scalability of our approach, by means of two case studies, on the Exact Widget Framework and Pageflakes, a commercial, widely used widget framework.},
booktitle = {Proceedings of the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
pages = {81–90},
numpages = {10},
keywords = {security testing, web applications},
location = {Amsterdam, The Netherlands},
series = {ESEC/FSE '09}
}

@inproceedings{10.1145/1368088.1368112,
author = {Wassermann, Gary and Su, Zhendong},
title = {Static Detection of Cross-Site Scripting Vulnerabilities},
year = {2008},
isbn = {9781605580791},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1368088.1368112},
doi = {10.1145/1368088.1368112},
abstract = {Web applications support many of our daily activities, but they often have security problems, and their accessibility makes them easy to exploit. In cross-site scripting (XSS), an attacker exploits the trust a web client (browser) has for a trusted server and executes injected script on the browser with the server's privileges. In 2006, XSS constituted the largest class of newly reported vulnerabilities making it the most prevalent class of attacks today. Web applications have XSS vulnerabilities because the validation they perform on untrusted input does not suffice to prevent that input from invoking a browser's JavaScript interpreter, and this validation is particularly difficult to get right if it must admit some HTML mark-up. Most existing approaches to finding XSS vulnerabilities are taint-based and assume input validation functions to be adequate, so they either miss real vulnerabilities or report many false positives.This paper presents a static analysis for finding XSS vulnerabilities that directly addresses weak or absent input validation. Our approach combines work on tainted information flow with string analysis. Proper input validation is difficult largely because of the many ways to invoke the JavaScript interpreter; we face the same obstacle checking for vulnerabilities statically, and we address it by formalizing a policy based on the W3C recommendation, the Firefox source code, and online tutorials about closed-source browsers. We provide effective checking algorithms based on our policy. We implement our approach and provide an extensive evaluation that finds both known and unknown vulnerabilities in real-world web applications.},
booktitle = {Proceedings of the 30th International Conference on Software Engineering},
pages = {171–180},
numpages = {10},
keywords = {static analysis, web applications, cross-site scripting, input validation},
location = {Leipzig, Germany},
series = {ICSE '08}
}

@INPROCEEDINGS{5070521, 
 author={A. {Kieyzun} and P. J. {Guo} and K. {Jayaraman} and M. D. {Ernst}}, 
 booktitle={2009 IEEE 31st International Conference on Software Engineering},   
title={Automatic creation of SQL Injection and cross-site scripting attacks},   
year={2009},
  volume={}, 
 number={}, 
 pages={199-209}, 
 doi={10.1109/ICSE.2009.5070521}}

@inproceedings{10.1145/1390630.1390661,
author = {Wassermann, Gary and Yu, Dachuan and Chander, Ajay and Dhurjati, Dinakar and Inamura, Hiroshi and Su, Zhendong},
title = {Dynamic Test Input Generation for Web Applications},
year = {2008},
isbn = {9781605580500},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1390630.1390661},
doi = {10.1145/1390630.1390661},
abstract = {Web applications routinely handle sensitive data, and many people rely on them to support various daily activities, so errors can have severe and broad-reaching consequences. Unlike most desktop applications, many web applications are written in scripting languages, such as PHP. The dynamic features commonly supported by these languages significantly inhibit static analysis and existing static analysis of these languages can fail to produce meaningful results on realworld web applications.Automated test input generation using the concolic testing framework has proven useful for finding bugs and improving test coverage on C and Java programs, which generally emphasize numeric values and pointer-based data structures. However, scripting languages, such as PHP, promote a style of programming for developing web applications that emphasizes string values, objects, and arrays.In this paper, we propose an automated input test generation algorithm that uses runtime values to analyze dynamic code, models the semantics of string operations, and handles operations whose argument and return values may not share a common type. As in the standard concolic testing framework, our algorithm gathers constraints during symbolic execution. Our algorithm resolves constraints over multiple types by considering each variable instance individually, so that it only needs to invert each operation. By recording constraints selectively, our implementation successfully finds bugs in real-world web applications which state-of-the-art static analysis tools fail to analyze.},
booktitle = {Proceedings of the 2008 International Symposium on Software Testing and Analysis},
pages = {249–260},
numpages = {12},
keywords = {concolic testing, automatic test generation, web applications, directed random testing},
location = {Seattle, WA, USA},
series = {ISSTA '08}
}

@ARTICLE{5416728,
author={S. {Artzi} and A. {Kiezun} and J. {Dolby} and F. {Tip} and D. {Dig} and A. {Paradkar} and M. D. {Ernst}},
  journal={IEEE Transactions on Software Engineering}, 
  title={Finding Bugs in Web Applications Using Dynamic Test Generation and Explicit-State Model Checking},   
year={2010},  
volume={36}, 
 number={4},
pages={474-494},
  doi={10.1109/TSE.2010.31}}

@inproceedings{10.1145/2393596.2393608,
author = {Xiao, Xusheng and Paradkar, Amit and Thummalapenta, Suresh and Xie, Tao},
title = {Automated Extraction of Security Policies from Natural-Language Software Documents},
year = {2012},
isbn = {9781450316149},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2393596.2393608},
doi = {10.1145/2393596.2393608},
booktitle = {Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering},
articleno = {12},
numpages = {11},
keywords = {access control, natural language processing, requirements analysis},
location = {Cary, North Carolina},
series = {FSE '12}
}

@INPROCEEDINGS{8094406,
  author={J. {Pan} and X. {Mao}},
  booktitle={2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)},  
 title={Detecting DOM-Sourced Cross-Site Scripting in Browser Extensions}, 
  year={2017}, 
 volume={}, 
 number={},
pages={24-34},  
doi={10.1109/ICSME.2017.11}}

@InProceedings{10.1007/978-3-642-04444-1_33,
author="Sun, Fangqi
and Xu, Liang
and Su, Zhendong",
editor="Backes, Michael
and Ning, Peng",
title="Client-Side Detection of {XSS} Worms by Monitoring Payload Propagation",
booktitle="Computer Security -- ESORICS 2009",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="539--554",
abstract="Cross-site scripting (XSS) vulnerabilities make it possible for worms to spread quickly to a broad range of users on popular Web sites. To date, the detection of XSS worms has been largely unexplored. This paper proposes the first purely client-side solution to detect XSS worms. Our insight is that an XSS worm must spread from one user to another by reconstructing and propagating its payload. Our approach prevents the propagation of XSS worms by monitoring outgoing requests that send self-replicating payloads. We intercept all HTTP requests on the client side and compare them with currently embedded scripts. We have implemented a cross-platform Firefox extension that is able to detect all existing self-replicating XSS worms that propagate on the client side. Our test results show that it incurs low performance overhead and reports no false positives when tested on popular Web sites.",
isbn="978-3-642-04444-1"
}

@inproceedings{10.1145/1595696.1595711,
author = {Bezemer, Cor-Paul and Mesbah, Ali and van Deursen, Arie},
title = {Automated Security Testing of Web Widget Interactions},
year = {2009},
isbn = {9781605580012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1595696.1595711},
doi = {10.1145/1595696.1595711},
abstract = {We present a technique for automatically detecting security vulnerabilities in client-side self-contained components, called web widgets, that can co-exist independently on a single web page. In this paper we focus on two security scenarios, namely the case in which (1) a malicious widget changes the content (DOM) of another widget, and (2) a widget steals data from another widget and sends it to the server via an HTTP request. We propose a dynamic analysis approach for automatically executing the web application and analyzing the runtime changes in the user interface, as well as the outgoing HTTP calls, to detect inter-widget interaction violations.Our approach, implemented in a number of open source ATUSA plugins, called DIVA, requires no modification of application code, and has few false positives. We discuss the results of an empirical evaluation of the violation revealing capabilities, performance, and scalability of our approach, by means of two case studies, on the Exact Widget Framework and Pageflakes, a commercial, widely used widget framework.},
booktitle = {Proceedings of the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
pages = {81–90},
numpages = {10},
keywords = {web applications, security testing},
location = {Amsterdam, The Netherlands},
series = {ESEC/FSE '09}
}

