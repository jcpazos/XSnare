'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

var _getPort = require('get-port');

var _getPort2 = _interopRequireDefault(_getPort);

var _tcpPortUsed = require('tcp-port-used');

var _browser = require('./browser');

var _browser2 = _interopRequireDefault(_browser);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CONNECTION_TIMEOUT = 10000;
const CONNECTION_INTERVAL = 250;
const FIREFOX_PROFILE_PATH = _path2.default.join(_os2.default.tmpdir(), 'firefox_dev_profile-');

class Launcher {
    static launch(options = {}) {
        return (0, _asyncToGenerator3.default)(function* () {
            const host = '127.0.0.1';
            const listeners = [];
            const debuggerPort = yield (0, _getPort2.default)({ port: options.port || 9222 });

            /**
             * create custom profile
             */
            const profileDir = _fsExtra2.default.mkdtempSync(FIREFOX_PROFILE_PATH);
            _fsExtra2.default.copySync(_path2.default.resolve(__dirname, 'config', 'profile', 'prefs.js'), _path2.default.resolve(profileDir, 'prefs.js'));

            const firefoxExecuteable = options.bin || Launcher.getFirefoxBin();
            const firefoxArguments = (options.args || []).concat('-start-debugger-server', debuggerPort, '-url', options.url || 'https://google.com', '-override', _path2.default.resolve(__dirname, 'config', 'override.ini'), '-profile', profileDir);
            const firefoxProcess = (0, _child_process.spawn)(firefoxExecuteable, firefoxArguments, {});

            function killAndCleanup() {
                (0, _utils.removeEventListeners)(listeners);
                firefoxProcess.kill('SIGKILL');
            }

            listeners.push((0, _utils.addEventListener)(process, 'exit', killAndCleanup));
            listeners.push((0, _utils.addEventListener)(firefoxProcess, 'exit', killAndCleanup));

            yield Launcher.waitUntilConnected(host, debuggerPort);
            const browser = new _browser2.default(host, debuggerPort);
            yield browser.connect();

            browser.firefoxProcess = firefoxProcess;
            return Launcher.waitForTab(browser);
        })();
    }

    static getFirefoxExe() {
        // Only run these checks on win32
        if (process.platform !== 'win32') {
            return null;
        }

        const suffix = '\\Mozilla\\firefox.exe';
        const prefixes = [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env['PROGRAMFILES(X86)']];

        let windowsFirefoxDirectory;
        for (const prefix of prefixes) {
            try {
                windowsFirefoxDirectory = _path2.default.join(prefix, suffix);
                _fsExtra2.default.accessSync(windowsFirefoxDirectory);
                return windowsFirefoxDirectory;
            } catch (e) {}
        }

        return windowsFirefoxDirectory;
    }

    static getFirefoxBin() {
        if (process.platform === 'win32') {
            return Launcher.getFirefoxExe();
        }

        if (process.platform === 'darwin') {
            return '/Applications/Firefox.app/Contents/MacOS/firefox';
        }

        if (process.platform !== 'linux') {
            return 'google-chrome';
        }

        throw new Error(`Couldn't find executable for platform "${process.platform}"`);
    }

    static waitUntilConnected(host, port, timeout = CONNECTION_TIMEOUT) {
        return (0, _asyncToGenerator3.default)(function* () {
            const isConnected = yield (0, _tcpPortUsed.check)(port, host);
            if (isConnected) {
                return true;
            }

            yield new _promise2.default(function (resolve) {
                return setTimeout(resolve, CONNECTION_INTERVAL);
            });
            return Launcher.waitUntilConnected(host, port, timeout - CONNECTION_INTERVAL);
        })();
    }

    static waitForTab(browser) {
        return (0, _asyncToGenerator3.default)(function* () {
            const tabs = yield browser.listTabs();
            if (tabs.length > 0) {
                return { browser, tab: tabs[0] };
            }

            yield new _promise2.default(function (resolve) {
                return setTimeout(resolve, CONNECTION_INTERVAL);
            });
            return Launcher.waitForTab(browser);
        })();
    }
}
exports.default = Launcher;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,