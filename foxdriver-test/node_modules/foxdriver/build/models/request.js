'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _actor = require('../actor');

var _actor2 = _interopRequireDefault(_actor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Request extends _actor2.default {
    constructor(client, event) {
        super(client, event.actor);

        this.startedDateTime = event.startedDateTime;
        this.timeStamp = event.timeStamp;
        this.url = event.url;
        this.method = event.method;
        this.isXHR = event.isXHR;
        this.fromCache = event.fromCache;
        this.cause = event.cause;
        this.private = event.private;

        this.on('networkEventUpdate', this.onUpdate.bind(this));
    }

    /**
     * Retrieve the request headers from the given NetworkEventActor.
     */
    getRequestHeaders() {
        return this.request('getRequestHeaders');
    }

    /**
     * Retrieve the request cookies from the given NetworkEventActor.
     */
    getRequestCookies() {
        return this.request('getRequestCookies');
    }

    /**
     * Retrieve the request post data from the given NetworkEventActor.
     */
    getRequestPostData() {
        return this.request('getRequestPostData');
    }

    /**
     * Retrieve the response headers from the given NetworkEventActor.
     */
    getResponseHeaders() {
        return this.request('getResponseHeaders');
    }

    /**
     * Retrieve the response cookies from the given NetworkEventActor.
     */
    getResponseCookies() {
        return this.request('getResponseCookies');
    }

    /**
     * Retrieve the response content from the given NetworkEventActor.
     */
    getResponseContent() {
        return this.request('getResponseContent');
    }

    /**
     * Retrieve the timing information for the given NetworkEventActor.
     */
    getEventTimings() {
        return this.request('getEventTimings');
    }

    getResponseStart() {
        return this.request('getResponseStart');
    }

    onUpdate(e) {
        const type = `on${e.updateType[0].toUpperCase()}${e.updateType.slice(1)}`;
        this.emit(type, e);
    }

    /**
     * Retrieve the security information for the given NetworkEventActor.
     */
    getSecurityInfo() {
        return this.request('getSecurityInfo');
    }
}
exports.default = Request;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvcmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJSZXF1ZXN0IiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJldmVudCIsImFjdG9yIiwic3RhcnRlZERhdGVUaW1lIiwidGltZVN0YW1wIiwidXJsIiwibWV0aG9kIiwiaXNYSFIiLCJmcm9tQ2FjaGUiLCJjYXVzZSIsInByaXZhdGUiLCJvbiIsIm9uVXBkYXRlIiwiZ2V0UmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwiZ2V0UmVxdWVzdENvb2tpZXMiLCJnZXRSZXF1ZXN0UG9zdERhdGEiLCJnZXRSZXNwb25zZUhlYWRlcnMiLCJnZXRSZXNwb25zZUNvb2tpZXMiLCJnZXRSZXNwb25zZUNvbnRlbnQiLCJnZXRFdmVudFRpbWluZ3MiLCJnZXRSZXNwb25zZVN0YXJ0IiwiZSIsInR5cGUiLCJ1cGRhdGVUeXBlIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImVtaXQiLCJnZXRTZWN1cml0eUluZm8iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7QUFFZSxNQUFNQSxPQUFOLHlCQUE0QjtBQUN2Q0MsZ0JBQWFDLE1BQWIsRUFBcUJDLEtBQXJCLEVBQTRCO0FBQ3hCLGNBQU1ELE1BQU4sRUFBY0MsTUFBTUMsS0FBcEI7O0FBRUEsYUFBS0MsZUFBTCxHQUF1QkYsTUFBTUUsZUFBN0I7QUFDQSxhQUFLQyxTQUFMLEdBQWlCSCxNQUFNRyxTQUF2QjtBQUNBLGFBQUtDLEdBQUwsR0FBV0osTUFBTUksR0FBakI7QUFDQSxhQUFLQyxNQUFMLEdBQWNMLE1BQU1LLE1BQXBCO0FBQ0EsYUFBS0MsS0FBTCxHQUFhTixNQUFNTSxLQUFuQjtBQUNBLGFBQUtDLFNBQUwsR0FBaUJQLE1BQU1PLFNBQXZCO0FBQ0EsYUFBS0MsS0FBTCxHQUFhUixNQUFNUSxLQUFuQjtBQUNBLGFBQUtDLE9BQUwsR0FBZVQsTUFBTVMsT0FBckI7O0FBRUEsYUFBS0MsRUFBTCxDQUFRLG9CQUFSLEVBQWdDLEtBQUtDLFFBQXJDLE1BQWdDLElBQWhDO0FBQ0g7O0FBRUQ7OztBQUdBQyx3QkFBcUI7QUFDakIsZUFBTyxLQUFLQyxPQUFMLENBQWEsbUJBQWIsQ0FBUDtBQUNIOztBQUVEOzs7QUFHQUMsd0JBQXFCO0FBQ2pCLGVBQU8sS0FBS0QsT0FBTCxDQUFhLG1CQUFiLENBQVA7QUFDSDs7QUFFRDs7O0FBR0FFLHlCQUFzQjtBQUNsQixlQUFPLEtBQUtGLE9BQUwsQ0FBYSxvQkFBYixDQUFQO0FBQ0g7O0FBRUQ7OztBQUdBRyx5QkFBc0I7QUFDbEIsZUFBTyxLQUFLSCxPQUFMLENBQWEsb0JBQWIsQ0FBUDtBQUNIOztBQUVEOzs7QUFHQUkseUJBQXNCO0FBQ2xCLGVBQU8sS0FBS0osT0FBTCxDQUFhLG9CQUFiLENBQVA7QUFDSDs7QUFFRDs7O0FBR0FLLHlCQUFzQjtBQUNsQixlQUFPLEtBQUtMLE9BQUwsQ0FBYSxvQkFBYixDQUFQO0FBQ0g7O0FBRUQ7OztBQUdBTSxzQkFBbUI7QUFDZixlQUFPLEtBQUtOLE9BQUwsQ0FBYSxpQkFBYixDQUFQO0FBQ0g7O0FBRURPLHVCQUFvQjtBQUNoQixlQUFPLEtBQUtQLE9BQUwsQ0FBYSxrQkFBYixDQUFQO0FBQ0g7O0FBRURGLGFBQVVVLENBQVYsRUFBYTtBQUNULGNBQU1DLE9BQVEsS0FBSUQsRUFBRUUsVUFBRixDQUFhLENBQWIsRUFBZ0JDLFdBQWhCLEVBQThCLEdBQUVILEVBQUVFLFVBQUYsQ0FBYUUsS0FBYixDQUFtQixDQUFuQixDQUFzQixFQUF4RTtBQUNBLGFBQUtDLElBQUwsQ0FBVUosSUFBVixFQUFnQkQsQ0FBaEI7QUFDSDs7QUFFRDs7O0FBR0FNLHNCQUFtQjtBQUNmLGVBQU8sS0FBS2QsT0FBTCxDQUFhLGlCQUFiLENBQVA7QUFDSDtBQS9Fc0M7a0JBQXRCaEIsTyIsImZpbGUiOiJyZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFjdG9yIGZyb20gJy4uL2FjdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0IGV4dGVuZHMgQWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yIChjbGllbnQsIGV2ZW50KSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgZXZlbnQuYWN0b3IpXG5cbiAgICAgICAgdGhpcy5zdGFydGVkRGF0ZVRpbWUgPSBldmVudC5zdGFydGVkRGF0ZVRpbWVcbiAgICAgICAgdGhpcy50aW1lU3RhbXAgPSBldmVudC50aW1lU3RhbXBcbiAgICAgICAgdGhpcy51cmwgPSBldmVudC51cmxcbiAgICAgICAgdGhpcy5tZXRob2QgPSBldmVudC5tZXRob2RcbiAgICAgICAgdGhpcy5pc1hIUiA9IGV2ZW50LmlzWEhSXG4gICAgICAgIHRoaXMuZnJvbUNhY2hlID0gZXZlbnQuZnJvbUNhY2hlXG4gICAgICAgIHRoaXMuY2F1c2UgPSBldmVudC5jYXVzZVxuICAgICAgICB0aGlzLnByaXZhdGUgPSBldmVudC5wcml2YXRlXG5cbiAgICAgICAgdGhpcy5vbignbmV0d29ya0V2ZW50VXBkYXRlJywgOjp0aGlzLm9uVXBkYXRlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSByZXF1ZXN0IGhlYWRlcnMgZnJvbSB0aGUgZ2l2ZW4gTmV0d29ya0V2ZW50QWN0b3IuXG4gICAgICovXG4gICAgZ2V0UmVxdWVzdEhlYWRlcnMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXRSZXF1ZXN0SGVhZGVycycpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHJlcXVlc3QgY29va2llcyBmcm9tIHRoZSBnaXZlbiBOZXR3b3JrRXZlbnRBY3Rvci5cbiAgICAgKi9cbiAgICBnZXRSZXF1ZXN0Q29va2llcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ2dldFJlcXVlc3RDb29raWVzJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgcmVxdWVzdCBwb3N0IGRhdGEgZnJvbSB0aGUgZ2l2ZW4gTmV0d29ya0V2ZW50QWN0b3IuXG4gICAgICovXG4gICAgZ2V0UmVxdWVzdFBvc3REYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0UmVxdWVzdFBvc3REYXRhJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgcmVzcG9uc2UgaGVhZGVycyBmcm9tIHRoZSBnaXZlbiBOZXR3b3JrRXZlbnRBY3Rvci5cbiAgICAgKi9cbiAgICBnZXRSZXNwb25zZUhlYWRlcnMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXRSZXNwb25zZUhlYWRlcnMnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSByZXNwb25zZSBjb29raWVzIGZyb20gdGhlIGdpdmVuIE5ldHdvcmtFdmVudEFjdG9yLlxuICAgICAqL1xuICAgIGdldFJlc3BvbnNlQ29va2llcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ2dldFJlc3BvbnNlQ29va2llcycpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHJlc3BvbnNlIGNvbnRlbnQgZnJvbSB0aGUgZ2l2ZW4gTmV0d29ya0V2ZW50QWN0b3IuXG4gICAgICovXG4gICAgZ2V0UmVzcG9uc2VDb250ZW50ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0UmVzcG9uc2VDb250ZW50JylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgdGltaW5nIGluZm9ybWF0aW9uIGZvciB0aGUgZ2l2ZW4gTmV0d29ya0V2ZW50QWN0b3IuXG4gICAgICovXG4gICAgZ2V0RXZlbnRUaW1pbmdzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0RXZlbnRUaW1pbmdzJylcbiAgICB9XG5cbiAgICBnZXRSZXNwb25zZVN0YXJ0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0UmVzcG9uc2VTdGFydCcpXG4gICAgfVxuXG4gICAgb25VcGRhdGUgKGUpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGBvbiR7ZS51cGRhdGVUeXBlWzBdLnRvVXBwZXJDYXNlKCl9JHtlLnVwZGF0ZVR5cGUuc2xpY2UoMSl9YFxuICAgICAgICB0aGlzLmVtaXQodHlwZSwgZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgc2VjdXJpdHkgaW5mb3JtYXRpb24gZm9yIHRoZSBnaXZlbiBOZXR3b3JrRXZlbnRBY3Rvci5cbiAgICAgKi9cbiAgICBnZXRTZWN1cml0eUluZm8gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdnZXRTZWN1cml0eUluZm8nKVxuICAgIH1cbn1cbiJdfQ==