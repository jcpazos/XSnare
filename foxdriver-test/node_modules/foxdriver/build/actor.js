'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Actor extends _events2.default {
    constructor(client, name, data) {
        super();
        this.client = client;
        this.name = name;
        this.isEnabled = false;
        this.data = data;
        this.log = (0, _logger2.default)(`Actor:${name}`);

        this.client.on('message', message => {
            if (message.from === this.name) {
                this.emit(message.type, message);
            }
        });

        this._registeredDomains = {};
        this.setActors(data);
    }

    setActors(payload = {}) {
        this._actors = (0, _keys2.default)(payload).filter(key => key.endsWith('Actor')).reduce((obj, key) => {
            obj[key] = payload[key];
            return obj;
        }, {});
    }

    request(type, message = {}) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            message.to = _this.name;
            message.type = type;

            const result = yield _this.client.makeRequest(message);

            if (result.error) {
                throw new Error(`${result.message} (${result.error})`);
            }

            return result;
        })();
    }

    _get(domain, alias) {
        const apiName = alias || domain;
        const actorId = this._actors[`${domain}Actor`];

        if (!this._registeredDomains[apiName] && actorId) {
            /**
             * require domain actor dynamically
             */
            const Domain = require(`./domains/${apiName}`);
            this._registeredDomains[apiName] = new Domain(this.client, actorId);
            this.log.info(`registered ${apiName} with actor id ${actorId}`);
        }

        return this._registeredDomains[apiName];
    }
}
exports.default = Actor;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9hY3Rvci5qcyJdLCJuYW1lcyI6WyJBY3RvciIsImNvbnN0cnVjdG9yIiwiY2xpZW50IiwibmFtZSIsImRhdGEiLCJpc0VuYWJsZWQiLCJsb2ciLCJvbiIsIm1lc3NhZ2UiLCJmcm9tIiwiZW1pdCIsInR5cGUiLCJfcmVnaXN0ZXJlZERvbWFpbnMiLCJzZXRBY3RvcnMiLCJwYXlsb2FkIiwiX2FjdG9ycyIsImZpbHRlciIsImtleSIsImVuZHNXaXRoIiwicmVkdWNlIiwib2JqIiwicmVxdWVzdCIsInRvIiwicmVzdWx0IiwibWFrZVJlcXVlc3QiLCJlcnJvciIsIkVycm9yIiwiX2dldCIsImRvbWFpbiIsImFsaWFzIiwiYXBpTmFtZSIsImFjdG9ySWQiLCJEb21haW4iLCJyZXF1aXJlIiwiaW5mbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUVBOzs7Ozs7QUFFZSxNQUFNQSxLQUFOLDBCQUFpQztBQUM1Q0MsZ0JBQWFDLE1BQWIsRUFBcUJDLElBQXJCLEVBQTJCQyxJQUEzQixFQUFpQztBQUM3QjtBQUNBLGFBQUtGLE1BQUwsR0FBY0EsTUFBZDtBQUNBLGFBQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNBLGFBQUtFLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxhQUFLRCxJQUFMLEdBQVlBLElBQVo7QUFDQSxhQUFLRSxHQUFMLEdBQVcsc0JBQVEsU0FBUUgsSUFBSyxFQUFyQixDQUFYOztBQUVBLGFBQUtELE1BQUwsQ0FBWUssRUFBWixDQUFlLFNBQWYsRUFBMkJDLE9BQUQsSUFBYTtBQUNuQyxnQkFBSUEsUUFBUUMsSUFBUixLQUFpQixLQUFLTixJQUExQixFQUFnQztBQUM1QixxQkFBS08sSUFBTCxDQUFVRixRQUFRRyxJQUFsQixFQUF3QkgsT0FBeEI7QUFDSDtBQUNKLFNBSkQ7O0FBTUEsYUFBS0ksa0JBQUwsR0FBMEIsRUFBMUI7QUFDQSxhQUFLQyxTQUFMLENBQWVULElBQWY7QUFDSDs7QUFFRFMsY0FBV0MsVUFBVSxFQUFyQixFQUF5QjtBQUNyQixhQUFLQyxPQUFMLEdBQWUsb0JBQVlELE9BQVosRUFDVkUsTUFEVSxDQUNGQyxHQUFELElBQVNBLElBQUlDLFFBQUosQ0FBYSxPQUFiLENBRE4sRUFFVkMsTUFGVSxDQUVILENBQUNDLEdBQUQsRUFBTUgsR0FBTixLQUFjO0FBQ2xCRyxnQkFBSUgsR0FBSixJQUFXSCxRQUFRRyxHQUFSLENBQVg7QUFDQSxtQkFBT0csR0FBUDtBQUNILFNBTFUsRUFLUixFQUxRLENBQWY7QUFNSDs7QUFFS0MsV0FBTixDQUFlVixJQUFmLEVBQXFCSCxVQUFVLEVBQS9CLEVBQW1DO0FBQUE7O0FBQUE7QUFDL0JBLG9CQUFRYyxFQUFSLEdBQWEsTUFBS25CLElBQWxCO0FBQ0FLLG9CQUFRRyxJQUFSLEdBQWVBLElBQWY7O0FBRUEsa0JBQU1ZLFNBQVMsTUFBTSxNQUFLckIsTUFBTCxDQUFZc0IsV0FBWixDQUF3QmhCLE9BQXhCLENBQXJCOztBQUVBLGdCQUFJZSxPQUFPRSxLQUFYLEVBQWtCO0FBQ2Qsc0JBQU0sSUFBSUMsS0FBSixDQUFXLEdBQUVILE9BQU9mLE9BQVEsS0FBSWUsT0FBT0UsS0FBTSxHQUE3QyxDQUFOO0FBQ0g7O0FBRUQsbUJBQU9GLE1BQVA7QUFWK0I7QUFXbEM7O0FBRURJLFNBQU1DLE1BQU4sRUFBY0MsS0FBZCxFQUFxQjtBQUNqQixjQUFNQyxVQUFVRCxTQUFTRCxNQUF6QjtBQUNBLGNBQU1HLFVBQVUsS0FBS2hCLE9BQUwsQ0FBYyxHQUFFYSxNQUFPLE9BQXZCLENBQWhCOztBQUVBLFlBQUksQ0FBQyxLQUFLaEIsa0JBQUwsQ0FBd0JrQixPQUF4QixDQUFELElBQXFDQyxPQUF6QyxFQUFrRDtBQUM5Qzs7O0FBR0Esa0JBQU1DLFNBQVNDLFFBQVMsYUFBWUgsT0FBUSxFQUE3QixDQUFmO0FBQ0EsaUJBQUtsQixrQkFBTCxDQUF3QmtCLE9BQXhCLElBQW1DLElBQUlFLE1BQUosQ0FBVyxLQUFLOUIsTUFBaEIsRUFBd0I2QixPQUF4QixDQUFuQztBQUNBLGlCQUFLekIsR0FBTCxDQUFTNEIsSUFBVCxDQUFlLGNBQWFKLE9BQVEsa0JBQWlCQyxPQUFRLEVBQTdEO0FBQ0g7O0FBRUQsZUFBTyxLQUFLbkIsa0JBQUwsQ0FBd0JrQixPQUF4QixDQUFQO0FBQ0g7QUF2RDJDO2tCQUEzQjlCLEsiLCJmaWxlIjoiYWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cydcblxuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0b3IgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yIChjbGllbnQsIG5hbWUsIGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudFxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgICAgIHRoaXMuaXNFbmFibGVkID0gZmFsc2VcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YVxuICAgICAgICB0aGlzLmxvZyA9IGxvZ2dlcihgQWN0b3I6JHtuYW1lfWApXG5cbiAgICAgICAgdGhpcy5jbGllbnQub24oJ21lc3NhZ2UnLCAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZnJvbSA9PT0gdGhpcy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KG1lc3NhZ2UudHlwZSwgbWVzc2FnZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLl9yZWdpc3RlcmVkRG9tYWlucyA9IHt9XG4gICAgICAgIHRoaXMuc2V0QWN0b3JzKGRhdGEpXG4gICAgfVxuXG4gICAgc2V0QWN0b3JzIChwYXlsb2FkID0ge30pIHtcbiAgICAgICAgdGhpcy5fYWN0b3JzID0gT2JqZWN0LmtleXMocGF5bG9hZClcbiAgICAgICAgICAgIC5maWx0ZXIoKGtleSkgPT4ga2V5LmVuZHNXaXRoKCdBY3RvcicpKVxuICAgICAgICAgICAgLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHBheWxvYWRba2V5XVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmpcbiAgICAgICAgICAgIH0sIHt9KVxuICAgIH1cblxuICAgIGFzeW5jIHJlcXVlc3QgKHR5cGUsIG1lc3NhZ2UgPSB7fSkge1xuICAgICAgICBtZXNzYWdlLnRvID0gdGhpcy5uYW1lXG4gICAgICAgIG1lc3NhZ2UudHlwZSA9IHR5cGVcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNsaWVudC5tYWtlUmVxdWVzdChtZXNzYWdlKVxuXG4gICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtyZXN1bHQubWVzc2FnZX0gKCR7cmVzdWx0LmVycm9yfSlgKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIF9nZXQgKGRvbWFpbiwgYWxpYXMpIHtcbiAgICAgICAgY29uc3QgYXBpTmFtZSA9IGFsaWFzIHx8IGRvbWFpblxuICAgICAgICBjb25zdCBhY3RvcklkID0gdGhpcy5fYWN0b3JzW2Ake2RvbWFpbn1BY3RvcmBdXG5cbiAgICAgICAgaWYgKCF0aGlzLl9yZWdpc3RlcmVkRG9tYWluc1thcGlOYW1lXSAmJiBhY3RvcklkKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHJlcXVpcmUgZG9tYWluIGFjdG9yIGR5bmFtaWNhbGx5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IERvbWFpbiA9IHJlcXVpcmUoYC4vZG9tYWlucy8ke2FwaU5hbWV9YClcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyZWREb21haW5zW2FwaU5hbWVdID0gbmV3IERvbWFpbih0aGlzLmNsaWVudCwgYWN0b3JJZClcbiAgICAgICAgICAgIHRoaXMubG9nLmluZm8oYHJlZ2lzdGVyZWQgJHthcGlOYW1lfSB3aXRoIGFjdG9yIGlkICR7YWN0b3JJZH1gKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdGVyZWREb21haW5zW2FwaU5hbWVdXG4gICAgfVxufVxuIl19