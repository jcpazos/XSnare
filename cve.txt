U 	AO 	UO 	D 	 	 	
x	x	x	x	CVE-2018-6943	IN DOUBT
x	x	x	x	CVE-2018-6944 	IN DOUBT
x	x	x	x	CVE-2018-7280 	possible XSS on response back (missing content-type application/json header???), not evident of where response is placed on DOM.
y	n	n	n	CVE-2018-7543 	reproducible, unclear whether it is an actual attack.
				CVE-2018-7747 	
n	n	y	y	(1)				exploit1 can be intercepted on a div with id="cf-autoresponder-message-{{_id}}" (in 101:config.php)
x	x	x	x	(2)				exploit2 can't be verified, form submission not working
n	y	n	y	(3)				exploit3 can be intercepted by the following selector: #fld_29462 > h3 more information could be the caldera-editor-field-title class, and being the first
								tag after the previous id.
n	y	n	y	CVE-2018-8729	for posts with javascript in the title, no immediate identifier for element with injection, but might be enough to stop javascript from running in the 		  							"description" columns of the activity log table
n	y	n	y	CVE-2018-9020	all these unsanitized inputs have identifying ids (e.g. location-name, location-town, etc.) which could be used to stop a script running here. 											Furthermore the problem in this specific case in a JS file (events-manager.js) loaded in the header, which could potentially be modified to sanitize the 				 			     mapTitle variable before anything happens. (https://www.youtube.com/watch?v=40d7uXl36O4)
y	n	n	n	CVE-2018-9034	Blocked by chrome's XSS auditor (ERR_BLOCKED_BY_XSS_AUDITOR), Firefox doesn't block it but an extension could do so using similar techniques to chrome's.
								(more info at https://www.exploit-db.com/exploits/44366/), admin being tricked into accessing url
y	n	y	y	CVE-2018-9172	this attack injects the attack script several times inside the "upload div". Fortunately, it seems like upload functionality is broken anyway by any kind 								  of injection, so it would be safe to disable everything inside the div with id='wordpress_file_upload_block'+(injected_js), e.g. for the attack I tried, 									the id looked like wordpress_file_upload_block_<script>alert('ManhNho')</script>, this id will be distinct across pages but the 														'wordpress_file_upload_block' part should not.
								(more info at https://www.exploit-db.com/exploits/44443/)
n	n	n	n	CVE-2018-9844 	skipped for now
n	y	n	y	CVE-2018-9864 	Unable to reproduce (history feature not working), however, from the  video (https://www.youtube.com/watch?v=eHG1pWaez9w), it should be easy to target 									the exploit as they happen on the admin page, which should be uniform across all sites, and has clear identifiers for the table elements (												class="chat_name column_chat_name" + id's based on element number).
y	n	n	y	CVE-2018-10102 	related to wordpress version, version string was not escaped in the get_the_generator function, and could lead to XSS in a generator tag. It sounds like 								 it would be very hard to pinpoint for an arbitrary page.
n	n	y	y	CVE-2018-10234 	not clear how the js can be injected, as it seems to be using the p tag's innerText property, need to investigate plugin code further.
n	n	y	y	CVE-2018-10300 	in here, an user (might have to have admin privileges) will modify it's instagram bio and use it to inject js into the wp instagram feed. The unique 									identifier for the place where this occurs seems to be the 'class="wdi_bio"', as well as further information that this specific page is indeed an 										instagram feed in wordpress (from other context clues).
x	x	x	x	CVE-2018-10301 	this exploit seems specific to the pro version of the 10-web instagram feed so I haven't been able to try it out.
n	n	y	y	CVE-2018-10309 	authenticated attack (admin on admin), injection occurs inside div class="rcc-panel group". trap (on scripts) seems to run before the rest of the body is 				  				  loaded. (more info at https://www.exploit-db.com/exploits/44563/)
n	y	n	y	CVE-2018-10310 	authenticated attack (admin on admin), this only occurs in the admin view, and there is enough context here to block an attack regardless of the site, 									i.e. no scripts in table class="form-table" until <p class="submit">. (more info at https://www.exploit-db.com/exploits/44503/)
n	y	n	y	CVE-2018-10371	basically the same as above,  table class="form-table" until <input name="Submit" (more info at https://www.exploit-db.com/exploits/44585/).
n	n	n	y	CVE-2018-10752 	authenticated attack (admin on admin), there's some identifiers here but probably wouldn't hold in an arbitrary page, in div with classes "tggr-tweets									type-tggr-tweets", seems to be in the title part (header) of the aticle. (more info at https://www.exploit-db.com/exploits/45225/)
n	y	n	y	CVE-2018-11105 	same as CVE-2018-9864.
y	y	n	y	CVE-2018-11366	unauthenticated attack, injection happens on admin view, i.e no code runs in table class="wp-list-table widefat fixed users" until input 												name="lz_reset_ip". (more info at https://wpvulndb.com/vulnerabilities/9088)
y	y	n	y	CVE-2018-11485	unauthenticated attack, was not able to reproduce, injection didn't seem to work, but regardless, injection happes on admin view, presumably in order 									column of table.
x	x	x	x	CVE-2018-11568	can't reproduce, this theme has to be payed for, lloks like URL attack only, blocked by chrome XSS auditor. 																			(more info https://packetstormsecurity.com/files/143666/WordPress-GamePlan-Event-And-Gym-Fitness-Theme-1.5.13.2-Cross-Site-Scripting.html)
y	n	n	n	CVE-2018-11709	URL attack on plugin, (e.g. accessing localhost/index.php/community/?%22%3E%3Cscript%3Ealert(/XSS/)%3C/script%3E), blocked by chrome XSS auditor.
n	y	n	y	CVE-2018-13832 	authenticated attack (admin on admin), as before, this happens in admin view, table class="form-table", until p class="submit".
y	n	n	n	CVE-2018-14430	unclear if this is self-xss, or will run on admin view, more investigation needed. 																										(more info at https://hackpuntes.com/cve-2018-14430-wordpress-plugin-multi-step-form-125-multiples-xss-reflejados/#comment-902)
y	n	n	n	CVE-2018-16285	costs money to use, but essentially looks like a POST request causes injected code in the request to run, not sure if anything can be done about this one
								(e.g. 
								post /wp-admin/admin-ajax.php
								Host domain.com
								action=userpro_shortcode_template&shortcode=[userpro<img src=a onerror=alert(1)> id=1 layout="float" collage_per_page="20" emd_paginate_top="1" emd_paginate="1" emd_gender="Gender,radi)
								(more info at https://risataim.blogspot.com/2018/09/xss-en-plugin-userpro-de-wordpress.html)

				https://packetstormsecurity.com/files/149603/SYSS-2018-014.txt
				https://wpvulndb.com/

				Most of the information recorded here applies for <script> tags, as the 'beforescriptexecute' event works well with those. However, for things like images with 'onerror','onload',etc. and other elements, should be able to use proxies or other event rewriting methods to recreate what 'beforescriptexecute' does when these properties are accessed (TODO).


EXTRA CVEs for enhanced study:

				REST OF 2018:
y	n	n	n	CVE-2018-1000556	Reflected XSS, when loading specific URL, script runs 																																	(http://[path to WordPress]/wp-admin/admin.php?page=wps_pages_page&page-uri=%3F%22%3E%3Cscript%3Ealert%28document.cookie%29%3B%3C%2Fscript%3E)
									This is blocked by XSS filtering, i.e Chrome's XSS auditor, but not Firefox.
n	y	n	y	CVE-2018-18460		XSS through URL (i.e https://localhost/wp-admin/admin.php?page=wplivechat-menu-gdpr-page&term=123%5C%27%3E%3Cimg+src%3D1+onerror%3Dalert%281%29%3E) 									blocked by XSS filters (not Firefox). Interestingly, the content gets loaded from the DOM via the term input, but the HTML might load BEFORE the 										<input name='term' type='text' value='<?php echo($_GET['term')?> element, which makes it hard to pinpoint where the injection location starts. 											However, it might be good enough to just get rid of any script inside the <div id='wpbody-content'>. until the footer div. Otherwise, blocking it at 									 URL level should work.
				CVE-2018-18373		TODO
x	x	x	x	CVE-2018-18069		this is a paid plugin.
y	y	n	y	CVE-2018-17947		reflected XSS on admin view, should work when searching for scripts after <input name="text" placeholder="Search..." value="\" type="text"> and 										before <button class="button" type="submit">
				CVE-2018-17946
				CVE-2018-17884	
				CVE-2018-17866
				CVE-2018-17140	
				CVE-2018-17138
				CVE-2018-16363
				CVE-2018-13136
				CVE-2018-11580
				CVE-2018-11486
				CVE-2018-6891
				CVE-2018-6469
				CVE-2018-6468
				CVE-2018-6466
				CVE-2018-6357
				CVE-2018-6194
				CVE-2018-6002
				CVE-2018-6001
				CVE-2018-5776
				CVE-2018-5672
				CVE-2018-5671
				CVE-2018-5670
				CVE-2018-5668
				CVE-2018-5667
				CVE-2018-5666
				CVE-2018-5665
				CVE-2018-5664
				CVE-2018-5663
				CVE-2018-5662
				CVE-2018-5661
				CVE-2018-5660
				CVE-2018-5659
				CVE-2018-5657
				CVE-2018-5655
				CVE-2018-5654
				CVE-2018-5653
				CVE-2018-5652
				CVE-2018-5651
				CVE-2018-5369
				CVE-2018-5367
				CVE-2018-5366
				CVE-2018-5365
				CVE-2018-5364
				CVE-2018-5363
				CVE-2018-5362
				CVE-2018-5361
				CVE-2018-5316
				CVE-2018-5312
				CVE-2018-5311
				CVE-2018-5293
				CVE-2018-5292
				CVE-2018-5288
				CVE-2018-5286
				CVE-2018-5284
				CVE-2018-5214
				CVE-2018-5213
				CVE-2018-5212
				CVE-2018-0585
				CVE-2018-0578
				CVE-2018-0577
				CVE-2018-0576
				CVE-2018-0547
				CVE-2018-0546
				CVE-2017-18032
				CVE-2017-18015
				CVE-2017-18012
				CVE-2017-18011
				CVE-2017-18010
				CVE-2016-10706
				CVE-2016-10705
				CVE-2015-9273
				CVE-2015-9270
				CVE-2015-4557
				CVE-2015-2329
				CVE-2015-2324
				CVE-2014-6604
				CVE-2014-4932
				CVE-2014-2274
				CVE-2014-2297

				ALL 2017:
				CVE-2017-1002017
				CVE-2017-1002011
				CVE-2017-1000227
				CVE-2017-1000038
				CVE-2017-1000033	
				CVE-2017-17869
				CVE-2017-17780
				CVE-2017-17753
				CVE-2017-17744
				CVE-2017-17719
				CVE-2017-17451
				CVE-2017-17096
				CVE-2017-17094
				CVE-2017-17093
				CVE-2017-17092
				CVE-2017-17043
				CVE-2017-16842
				CVE-2017-16815
				CVE-2017-16758
				CVE-2017-15867
				CVE-2017-15863
				CVE-2017-15812
				CVE-2017-15811
				CVE-2017-15810
				CVE-2017-15375
				CVE-2017-14751
				CVE-2017-14726
				CVE-2017-14724
				CVE-2017-14721
				CVE-2017-14720
				CVE-2017-14718
				CVE-2017-14622
				CVE-2017-14530
				CVE-2017-14313
				CVE-2017-14126
				CVE-2017-13138
				CVE-2017-12948
				CVE-2017-12200
				CVE-2017-12131
				CVE-2017-12068
				CVE-2017-10991
				CVE-2017-9420
				CVE-2017-9337
				CVE-2017-9336
				CVE-2017-9288
				CVE-2017-9063
				CVE-2017-9061
				CVE-2017-7723
				CVE-2017-6818
				CVE-2017-6817
				CVE-2017-6814
				CVE-2017-6804
				CVE-2017-6103
				CVE-2017-6102
				CVE-2017-5942
				CVE-2017-5612
				CVE-2017-5490
				CVE-2017-5488
				CVE-2017-2216
				CVE-2016-10112
				CVE-2016-7168	
				CVE-2016-0770
				CVE-2016-0765
				CVE-2015-9233
				CVE-2015-9230
				CVE-2015-9229
				CVE-2015-8354
				CVE-2015-8353
				CVE-2015-8350
				CVE-2015-7668
				CVE-2015-7666
				CVE-2015-7667
				CVE-2015-7357
				CVE-2015-5532
				CVE-2015-5057
				CVE-2015-3998
				CVE-2015-3421
				CVE-2015-3299
				CVE-2014-9310
				CVE-2014-8758
				CVE-2014-8492
				CVE-2014-8087
				CVE-2014-7240
				CVE-2011-4955




